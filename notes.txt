https://www.prepbytes.com/blog/python/abstraction-in-python/

Encapsulation 

To enhance encapsulation, you can make several improvements to ensure that the code follows object-oriented principles.

Use of Classes for Encapsulation:
You've defined classes, which is a good step towards encapsulation. However, you can further enhance encapsulation by organizing your code into well-defined classes and encapsulating the data and methods within these classes.

Private Attributes:
To encapsulate data, you should make instance variables private by prefixing them with underscores (e.g., _id, _name, _email, and _password) to indicate that they are internal to the class and should not be accessed directly. You can provide getter methods to access these attributes.

In this improved code:

The User class has private attributes, and getter methods are provided to access these attributes. This ensures that the internal data is encapsulated and not accessed directly.
The UserAuthenticator class is responsible for finding users and returning user objects.
The UserNameGetter class defines a method for getting the user's name from the user object.
AuthValidation uses these classes to perform authentication and retrieve user names.
By encapsulating data and methods within appropriate classes and providing access through getter methods, you improve the maintainability and readability of your code while adhering to encapsulation principles.





